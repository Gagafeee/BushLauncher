/*
 * Copyright (c) 2012 Hendrix Tavarez
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

var http = require('http');
var url = require('url');
var fs = require('fs');
var EventEmitter = require('events').EventEmitter;
var util = require('util');

class Downloader {
    constructor() {}
    request(options, outputDir, filename, maxFileSize) {
        return new Promise((resolve, reject) => {
            http.get(options, (res) => {
                if (res.statusCode === 200) {
                    console.log("[Download]: Url valide, starting download...");
                    var filesize = res.headers['content-length'];
                    if (filesize <= maxFileSize) {
                        var downloadfile = fs.createWriteStream(outputDir + filename, {
                            flags: 'a',
                            encoding: 'binary'
                        });

                        res.on('error', function(err) {
                            reject('[FILE DOWNLOAD ERROR - DATA] ' + err);
                        });
                        res.on('data', function(chunk) {
                            downloadfile.write(chunk);
                        });
                        res.on('end', function() {
                            downloadfile.end();
                            resolve(outputDir + filename);
                        });
                    } else {
                        console.log('maxFileSize = ' + maxFileSize + ' filesize = ' + filesize);
                        reject('[REQUEST FAILED] file size > ' + maxFileSize + ' bytes. File size = ' + filesize);
                    }
                } else {
                  console.error(options);
                  console.log(res);
                  reject('[REQUEST FAILED] ' + res.statusCode + ' PATH ' + options.host + " : " + options.path);
                }
            });
        })
    }

    download(theUrl, outputDir, maxFileSize) {
        return new Promise((resolve, reject) => {
            const options = {
                host: url.parse(theUrl).hostname,
                port: url.parse(theUrl).port,
                path: url.parse(theUrl).pathname
            };

            const OutputDir = outputDir || './';

            const filename = options.path.split("/").pop();

            const MaxFileSize = maxFileSize || 1000000000; // default to 100MB

            this.request(options, OutputDir, filename, MaxFileSize)
                .then((res) => {
                    resolve(res);
                })
                .catch((err) => {
                    reject(err)
                })
        })
    }



};


module.exports = { Downloader };