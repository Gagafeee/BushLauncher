'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Get Minecraft style code for the style
 */
function getStyleCode(style) {
    let code = "";
    for (const l of TextFormat.list) {
        if (l.matchStyle(style)) {
            code += l;
        }
    }
    return code;
}
/**
 * Get suggest css style object for input style
 */
function getSuggestedStyle(style) {
    const styledObject = {};
    for (const l of TextFormat.list) {
        if (l.matchStyle(style)) {
            Object.assign(styledObject, l.cssForeground);
        }
    }
    return styledObject;
}
/**
 * Render a text component into html style object
 * @returns the render node hint for html/css info
 */
function render(src) {
    const children = [];
    for (const component of src.extra || []) {
        children.push(render(component));
    }
    return { children, component: src, style: getSuggestedStyle(src) };
}
/**
 * Flat all components (this component and its children) in this component by DFS into a list.
 * @param component The root component
 */
function flat(component) {
    const arr = [component];
    if (component.extra && component.extra.length !== 0) {
        for (const s of component.extra) {
            arr.push(...flat(s));
        }
    }
    return arr;
}
/**
 * Convert a text component to Minecraft specific formatted string like `§1colored§r`
 */
function toFormattedString(comp) {
    let v = "";
    for (const component of flat(comp)) {
        const text = component.text;
        if (text.length !== 0) {
            v += `${getStyleCode(component)}${text}${TextFormat.RESET}`;
        }
    }
    return v;
}
/**
 * Convert a formatted string to text component json
 * @param formatted The formatted string
 */
function fromFormattedString(formatted) {
    const firstCode = formatted.indexOf("§");
    if (firstCode === -1) {
        return { text: formatted };
    }
    let textComponent = {
        text: formatted.substring(0, firstCode),
    };
    let builder = "";
    let style = {
        bold: false,
        obfuscated: false,
        strikethrough: false,
        underlined: false,
        italic: false,
        color: undefined,
    };
    for (let i = firstCode; i < formatted.length; i++) {
        const word = formatted.charCodeAt(i);
        if (word === 167 && i + 1 < formatted.length) {
            if (builder.length !== 0) {
                if (!textComponent.extra) {
                    textComponent.extra = [];
                }
                textComponent.extra.push({ text: builder, ...style });
                builder = "";
            }
            // apply style
            const format = TextFormat.fromCode(formatted.charAt(i + 1).toLowerCase());
            if (format) {
                format.applyToStyle(style);
            }
            ++i; // ignore the next char
        }
        else {
            builder += formatted[i];
        }
    }
    if (builder.length !== 0) {
        if (!textComponent.extra) {
            textComponent.extra = [];
        }
        textComponent.extra.push({ text: builder, ...style });
    }
    return textComponent;
}
class TextFormat {
    constructor(key, value, name, code, cssForeground, cssBackground) {
        this.key = key;
        this.value = value;
        this.name = name;
        this.code = code;
        this.cssForeground = cssForeground;
        this.cssBackground = cssBackground;
    }
    applyToStyle(style) { style[this.key] = this.value; }
    matchStyle(style) { return style[this.key] === this.value; }
    static fromCode(code) {
        const seq = "0123456789abcdefklmnor";
        const index = seq.indexOf(code);
        if (!index) {
            return undefined;
        }
        return this.list[seq.indexOf(code)];
    }
    toString() {
        return `${TextFormat.CONTROL_STRING}${this.code}`;
    }
}
TextFormat.CONTROL_STRING = "§";
TextFormat.BLACK = new TextFormat("color", "black", "BLACK", "0", { color: "#000000" }, { color: "#000000" });
TextFormat.DARK_BLUE = new TextFormat("color", "dark_blue", "DARK_BLUE", "1", { color: "#0000AA" }, { color: "#00002A" });
TextFormat.DARK_GREEN = new TextFormat("color", "DARK_GREEN", "DARK_GREEN", "2", { color: "#00AA00" }, { color: "#002A00" });
TextFormat.DARK_AQUA = new TextFormat("color", "dark_aqua", "DARK_AQUA", "3", { color: "#00AAAA" }, { color: "#002A2A" });
TextFormat.DARK_RED = new TextFormat("color", "dark_red", "DARK_RED", "4", { color: "#AA0000" }, { color: "#2A0000" });
TextFormat.DARK_PURPLE = new TextFormat("color", "dark_purple", "DARK_PURPLE", "5", { color: "#AA00AA" }, { color: "#2A002A" });
TextFormat.GOLD = new TextFormat("color", "gold", "GOLD", "6", { color: "#FFAA00" }, { color: "#2A2A00" });
TextFormat.GRAY = new TextFormat("color", "gray", "GRAY", "7", { color: "#AAAAAA" }, { color: "#2A2A2A" });
TextFormat.DARK_GRAY = new TextFormat("color", "dark_gray", "DARK_GRAY", "8", { color: "#555555" }, { color: "#151515" });
TextFormat.BLUE = new TextFormat("color", "blue", "BLUE", "9", { color: "#5555FF" }, { color: "#15153F" });
TextFormat.GREEN = new TextFormat("color", "green", "GREEN", "a", { color: "#55FF55" }, { color: "#153F15" });
TextFormat.AQUA = new TextFormat("color", "aqua", "AQUA", "b", { color: "#55FFFF" }, { color: "#153F3F" });
TextFormat.RED = new TextFormat("color", "red", "RED", "c", { color: "#FF5555" }, { color: "#3F1515" });
TextFormat.LIGHT_PURPLE = new TextFormat("color", "light_purple", "LIGHT_PURPLE", "d", { color: "#FF55FF" }, { color: "#3F153F" });
TextFormat.YELLOW = new TextFormat("color", "yellow", "YELLOW", "e", { color: "#FFFF55" }, { color: "#3F3F15" });
TextFormat.WHITE = new TextFormat("color", "white", "WHITE", "f", { color: "#FFFFFF" }, { color: "#3F3F3F" });
TextFormat.OBFUSCATED = new TextFormat("obfuscated", true, "OBFUSCATED", "k", {});
TextFormat.BOLD = new TextFormat("bold", true, "BOLD", "l", { "font-weight": "bold" });
TextFormat.STRIKETHROUGH = new TextFormat("strikethrough", true, "STRIKETHROUGH", "m", { "text-decoration": "line-through" });
TextFormat.UNDERLINE = new TextFormat("underlined", true, "UNDERLINE", "n", { "text-decoration": "underline" });
TextFormat.ITALIC = new TextFormat("italic", true, "ITALIC", "o", { "font-style": "italic" });
TextFormat.RESET = {
    name: "RESET",
    code: "r",
    applyToStyle(style) {
        style.bold = false;
        style.strikethrough = false;
        style.underlined = false;
        style.italic = false;
        style.obfuscated = false;
        style.color = undefined;
    },
    matchStyle(style) { return false; },
    cssBackground: {},
    cssForeground: {},
    toString() { return `${TextFormat.CONTROL_STRING}r`; }
};
TextFormat.list = [
    TextFormat.BLACK,
    TextFormat.DARK_BLUE,
    TextFormat.DARK_GREEN,
    TextFormat.DARK_AQUA,
    TextFormat.DARK_RED,
    TextFormat.DARK_PURPLE,
    TextFormat.GOLD,
    TextFormat.GRAY,
    TextFormat.DARK_GRAY,
    TextFormat.BLUE,
    TextFormat.GREEN,
    TextFormat.AQUA,
    TextFormat.RED,
    TextFormat.LIGHT_PURPLE,
    TextFormat.YELLOW,
    TextFormat.WHITE,
    TextFormat.OBFUSCATED,
    TextFormat.BOLD,
    TextFormat.STRIKETHROUGH,
    TextFormat.UNDERLINE,
    TextFormat.ITALIC,
    TextFormat.RESET,
];

exports.flat = flat;
exports.fromFormattedString = fromFormattedString;
exports.getStyleCode = getStyleCode;
exports.getSuggestedStyle = getSuggestedStyle;
exports.render = render;
exports.toFormattedString = toFormattedString;
