"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _templateBase = require("@electron-forge/template-base");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class TypeScriptWebpackTemplate extends _templateBase.BaseTemplate {
    async initializeTemplate(directory, options) {
        await super.initializeTemplate(directory, options);
        await (0, _asyncOra).asyncOra('Setting up Forge configuration', async ()=>{
            const packageJSONPath = _path.default.resolve(directory, 'package.json');
            const packageJSON = await _fsExtra.default.readJson(packageJSONPath);
            packageJSON.main = '.webpack/main';
            packageJSON.config.forge.plugins = packageJSON.config.forge.plugins || [];
            packageJSON.config.forge.plugins.push([
                '@electron-forge/plugin-webpack',
                {
                    mainConfig: './webpack.main.config.js',
                    renderer: {
                        config: './webpack.renderer.config.js',
                        entryPoints: [
                            {
                                html: './src/index.html',
                                js: './src/renderer.ts',
                                name: 'main_window',
                                preload: {
                                    js: './src/preload.ts'
                                }
                            }, 
                        ]
                    }
                }, 
            ]);
            // Configure scripts for TS template
            packageJSON.scripts.lint = 'eslint --ext .ts,.tsx .';
            await _fsExtra.default.writeJson(packageJSONPath, packageJSON, {
                spaces: 2
            });
        });
        await (0, _asyncOra).asyncOra('Setting up TypeScript configuration', async ()=>{
            const filePath = (fileName)=>_path.default.join(directory, 'src', fileName)
            ;
            // Copy Webpack files
            await this.copyTemplateFile(directory, 'webpack.main.config.js');
            await this.copyTemplateFile(directory, 'webpack.renderer.config.js');
            await this.copyTemplateFile(directory, 'webpack.rules.js');
            await this.copyTemplateFile(directory, 'webpack.plugins.js');
            await this.updateFileByLine(_path.default.resolve(directory, 'src', 'index.html'), (line)=>{
                if (line.includes('link rel="stylesheet"')) return '';
                return line;
            });
            // Copy tsconfig with a small set of presets
            await this.copyTemplateFile(directory, 'tsconfig.json');
            // Copy eslint config with recommended settings
            await this.copyTemplateFile(directory, '.eslintrc.json');
            // Remove index.js and replace with index.ts
            await _fsExtra.default.remove(filePath('index.js'));
            await this.copyTemplateFile(_path.default.join(directory, 'src'), 'index.ts');
            await this.copyTemplateFile(_path.default.join(directory, 'src'), 'renderer.ts');
            // Remove preload.js and replace with preload.ts
            await _fsExtra.default.remove(filePath('preload.js'));
            await this.copyTemplateFile(_path.default.join(directory, 'src'), 'preload.ts');
        });
    }
    constructor(...args){
        super(...args);
        this.templateDir = _path.default.resolve(__dirname, '..', 'tmpl');
    }
}
var _default = new TypeScriptWebpackTemplate();
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UeXBlU2NyaXB0V2VicGFja1RlbXBsYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgeyBCYXNlVGVtcGxhdGUgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvdGVtcGxhdGUtYmFzZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgSW5pdFRlbXBsYXRlT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmNsYXNzIFR5cGVTY3JpcHRXZWJwYWNrVGVtcGxhdGUgZXh0ZW5kcyBCYXNlVGVtcGxhdGUge1xuICBwdWJsaWMgdGVtcGxhdGVEaXIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAndG1wbCcpO1xuXG4gIGFzeW5jIGluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3Rvcnk6IHN0cmluZywgb3B0aW9uczogSW5pdFRlbXBsYXRlT3B0aW9ucykge1xuICAgIGF3YWl0IHN1cGVyLmluaXRpYWxpemVUZW1wbGF0ZShkaXJlY3RvcnksIG9wdGlvbnMpO1xuICAgIGF3YWl0IGFzeW5jT3JhKCdTZXR0aW5nIHVwIEZvcmdlIGNvbmZpZ3VyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYWNrYWdlSlNPTlBhdGggPSBwYXRoLnJlc29sdmUoZGlyZWN0b3J5LCAncGFja2FnZS5qc29uJyk7XG4gICAgICBjb25zdCBwYWNrYWdlSlNPTiA9IGF3YWl0IGZzLnJlYWRKc29uKHBhY2thZ2VKU09OUGF0aCk7XG5cbiAgICAgIHBhY2thZ2VKU09OLm1haW4gPSAnLndlYnBhY2svbWFpbic7XG4gICAgICBwYWNrYWdlSlNPTi5jb25maWcuZm9yZ2UucGx1Z2lucyA9IHBhY2thZ2VKU09OLmNvbmZpZy5mb3JnZS5wbHVnaW5zIHx8IFtdO1xuICAgICAgcGFja2FnZUpTT04uY29uZmlnLmZvcmdlLnBsdWdpbnMucHVzaChbXG4gICAgICAgICdAZWxlY3Ryb24tZm9yZ2UvcGx1Z2luLXdlYnBhY2snLFxuICAgICAgICB7XG4gICAgICAgICAgbWFpbkNvbmZpZzogJy4vd2VicGFjay5tYWluLmNvbmZpZy5qcycsXG4gICAgICAgICAgcmVuZGVyZXI6IHtcbiAgICAgICAgICAgIGNvbmZpZzogJy4vd2VicGFjay5yZW5kZXJlci5jb25maWcuanMnLFxuICAgICAgICAgICAgZW50cnlQb2ludHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGh0bWw6ICcuL3NyYy9pbmRleC5odG1sJyxcbiAgICAgICAgICAgICAgICBqczogJy4vc3JjL3JlbmRlcmVyLnRzJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnbWFpbl93aW5kb3cnLFxuICAgICAgICAgICAgICAgIHByZWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgIGpzOiAnLi9zcmMvcHJlbG9hZC50cycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0pO1xuXG4gICAgICAvLyBDb25maWd1cmUgc2NyaXB0cyBmb3IgVFMgdGVtcGxhdGVcbiAgICAgIHBhY2thZ2VKU09OLnNjcmlwdHMubGludCA9ICdlc2xpbnQgLS1leHQgLnRzLC50c3ggLic7XG5cbiAgICAgIGF3YWl0IGZzLndyaXRlSnNvbihwYWNrYWdlSlNPTlBhdGgsIHBhY2thZ2VKU09OLCB7IHNwYWNlczogMiB9KTtcbiAgICB9KTtcblxuICAgIGF3YWl0IGFzeW5jT3JhKCdTZXR0aW5nIHVwIFR5cGVTY3JpcHQgY29uZmlndXJhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZpbGVQYXRoID0gKGZpbGVOYW1lOiBzdHJpbmcpID0+IHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnLCBmaWxlTmFtZSk7XG5cbiAgICAgIC8vIENvcHkgV2VicGFjayBmaWxlc1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2subWFpbi5jb25maWcuanMnKTtcbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICd3ZWJwYWNrLnJlbmRlcmVyLmNvbmZpZy5qcycpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3dlYnBhY2sucnVsZXMuanMnKTtcbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICd3ZWJwYWNrLnBsdWdpbnMuanMnKTtcblxuICAgICAgYXdhaXQgdGhpcy51cGRhdGVGaWxlQnlMaW5lKHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdzcmMnLCAnaW5kZXguaHRtbCcpLCAobGluZSkgPT4ge1xuICAgICAgICBpZiAobGluZS5pbmNsdWRlcygnbGluayByZWw9XCJzdHlsZXNoZWV0XCInKSkgcmV0dXJuICcnO1xuICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDb3B5IHRzY29uZmlnIHdpdGggYSBzbWFsbCBzZXQgb2YgcHJlc2V0c1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJ3RzY29uZmlnLmpzb24nKTtcblxuICAgICAgLy8gQ29weSBlc2xpbnQgY29uZmlnIHdpdGggcmVjb21tZW5kZWQgc2V0dGluZ3NcbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShkaXJlY3RvcnksICcuZXNsaW50cmMuanNvbicpO1xuXG4gICAgICAvLyBSZW1vdmUgaW5kZXguanMgYW5kIHJlcGxhY2Ugd2l0aCBpbmRleC50c1xuICAgICAgYXdhaXQgZnMucmVtb3ZlKGZpbGVQYXRoKCdpbmRleC5qcycpKTtcbiAgICAgIGF3YWl0IHRoaXMuY29weVRlbXBsYXRlRmlsZShwYXRoLmpvaW4oZGlyZWN0b3J5LCAnc3JjJyksICdpbmRleC50cycpO1xuXG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUocGF0aC5qb2luKGRpcmVjdG9yeSwgJ3NyYycpLCAncmVuZGVyZXIudHMnKTtcblxuICAgICAgLy8gUmVtb3ZlIHByZWxvYWQuanMgYW5kIHJlcGxhY2Ugd2l0aCBwcmVsb2FkLnRzXG4gICAgICBhd2FpdCBmcy5yZW1vdmUoZmlsZVBhdGgoJ3ByZWxvYWQuanMnKSk7XG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUocGF0aC5qb2luKGRpcmVjdG9yeSwgJ3NyYycpLCAncHJlbG9hZC50cycpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBUeXBlU2NyaXB0V2VicGFja1RlbXBsYXRlKCk7XG4iXSwibmFtZXMiOlsiVHlwZVNjcmlwdFdlYnBhY2tUZW1wbGF0ZSIsIkJhc2VUZW1wbGF0ZSIsImluaXRpYWxpemVUZW1wbGF0ZSIsImRpcmVjdG9yeSIsIm9wdGlvbnMiLCJhc3luY09yYSIsInBhY2thZ2VKU09OUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwicGFja2FnZUpTT04iLCJmcyIsInJlYWRKc29uIiwibWFpbiIsImNvbmZpZyIsImZvcmdlIiwicGx1Z2lucyIsInB1c2giLCJtYWluQ29uZmlnIiwicmVuZGVyZXIiLCJlbnRyeVBvaW50cyIsImh0bWwiLCJqcyIsIm5hbWUiLCJwcmVsb2FkIiwic2NyaXB0cyIsImxpbnQiLCJ3cml0ZUpzb24iLCJzcGFjZXMiLCJmaWxlUGF0aCIsImZpbGVOYW1lIiwiam9pbiIsImNvcHlUZW1wbGF0ZUZpbGUiLCJ1cGRhdGVGaWxlQnlMaW5lIiwibGluZSIsImluY2x1ZGVzIiwicmVtb3ZlIiwidGVtcGxhdGVEaXIiLCJfX2Rpcm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQXlCLEdBQTJCLENBQTNCLFNBQTJCO0FBQ3ZCLEdBQStCLENBQS9CLGFBQStCO0FBQzdDLEdBQVUs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