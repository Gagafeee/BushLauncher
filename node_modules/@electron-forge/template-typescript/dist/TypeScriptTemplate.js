"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _asyncOra = require("@electron-forge/async-ora");
var _templateBase = require("@electron-forge/template-base");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class TypeScriptTemplate extends _templateBase.BaseTemplate {
    async initializeTemplate(directory) {
        await super.initializeTemplate(directory, {});
        await (0, _asyncOra).asyncOra('Setting up Forge configuration', async ()=>{
            const packageJSONPath = _path.default.resolve(directory, 'package.json');
            const packageJSON = await _fsExtra.default.readJson(packageJSONPath);
            // Configure scripts for TS template
            packageJSON.scripts.lint = 'eslint --ext .ts .';
            packageJSON.scripts.start = 'tsc && electron-forge start';
            packageJSON.main = 'dist/index.js';
            await _fsExtra.default.writeJson(packageJSONPath, packageJSON, {
                spaces: 2
            });
        });
        await (0, _asyncOra).asyncOra('Setting up TypeScript configuration', async ()=>{
            const filePath = (fileName)=>_path.default.join(directory, 'src', fileName)
            ;
            // Copy tsconfig with a small set of presets
            await this.copyTemplateFile(directory, 'tsconfig.json');
            // Copy eslint config with recommended settings
            await this.copyTemplateFile(directory, '.eslintrc.json');
            // Remove index.js and replace with index.ts
            await _fsExtra.default.remove(filePath('index.js'));
            await this.copyTemplateFile(_path.default.join(directory, 'src'), 'index.ts');
            // Remove preload.js and replace with preload.ts
            await _fsExtra.default.remove(filePath('preload.js'));
            await this.copyTemplateFile(_path.default.join(directory, 'src'), 'preload.ts');
        });
    }
    constructor(...args){
        super(...args);
        this.templateDir = _path.default.resolve(__dirname, '..', 'tmpl');
    }
}
var _default = new TypeScriptTemplate();
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UeXBlU2NyaXB0VGVtcGxhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXN5bmNPcmEgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvYXN5bmMtb3JhJztcbmltcG9ydCB7IEJhc2VUZW1wbGF0ZSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS90ZW1wbGF0ZS1iYXNlJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY2xhc3MgVHlwZVNjcmlwdFRlbXBsYXRlIGV4dGVuZHMgQmFzZVRlbXBsYXRlIHtcbiAgcHVibGljIHRlbXBsYXRlRGlyID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ3RtcGwnKTtcblxuICBhc3luYyBpbml0aWFsaXplVGVtcGxhdGUoZGlyZWN0b3J5OiBzdHJpbmcpIHtcbiAgICBhd2FpdCBzdXBlci5pbml0aWFsaXplVGVtcGxhdGUoZGlyZWN0b3J5LCB7fSk7XG4gICAgYXdhaXQgYXN5bmNPcmEoJ1NldHRpbmcgdXAgRm9yZ2UgY29uZmlndXJhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBhY2thZ2VKU09OUGF0aCA9IHBhdGgucmVzb2x2ZShkaXJlY3RvcnksICdwYWNrYWdlLmpzb24nKTtcbiAgICAgIGNvbnN0IHBhY2thZ2VKU09OID0gYXdhaXQgZnMucmVhZEpzb24ocGFja2FnZUpTT05QYXRoKTtcblxuICAgICAgLy8gQ29uZmlndXJlIHNjcmlwdHMgZm9yIFRTIHRlbXBsYXRlXG4gICAgICBwYWNrYWdlSlNPTi5zY3JpcHRzLmxpbnQgPSAnZXNsaW50IC0tZXh0IC50cyAuJztcbiAgICAgIHBhY2thZ2VKU09OLnNjcmlwdHMuc3RhcnQgPSAndHNjICYmIGVsZWN0cm9uLWZvcmdlIHN0YXJ0JztcbiAgICAgIHBhY2thZ2VKU09OLm1haW4gPSAnZGlzdC9pbmRleC5qcyc7XG5cbiAgICAgIGF3YWl0IGZzLndyaXRlSnNvbihwYWNrYWdlSlNPTlBhdGgsIHBhY2thZ2VKU09OLCB7IHNwYWNlczogMiB9KTtcbiAgICB9KTtcblxuICAgIGF3YWl0IGFzeW5jT3JhKCdTZXR0aW5nIHVwIFR5cGVTY3JpcHQgY29uZmlndXJhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZpbGVQYXRoID0gKGZpbGVOYW1lOiBzdHJpbmcpID0+IHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnLCBmaWxlTmFtZSk7XG5cbiAgICAgIC8vIENvcHkgdHNjb25maWcgd2l0aCBhIHNtYWxsIHNldCBvZiBwcmVzZXRzXG4gICAgICBhd2FpdCB0aGlzLmNvcHlUZW1wbGF0ZUZpbGUoZGlyZWN0b3J5LCAndHNjb25maWcuanNvbicpO1xuXG4gICAgICAvLyBDb3B5IGVzbGludCBjb25maWcgd2l0aCByZWNvbW1lbmRlZCBzZXR0aW5nc1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKGRpcmVjdG9yeSwgJy5lc2xpbnRyYy5qc29uJyk7XG5cbiAgICAgIC8vIFJlbW92ZSBpbmRleC5qcyBhbmQgcmVwbGFjZSB3aXRoIGluZGV4LnRzXG4gICAgICBhd2FpdCBmcy5yZW1vdmUoZmlsZVBhdGgoJ2luZGV4LmpzJykpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ2luZGV4LnRzJyk7XG5cbiAgICAgIC8vIFJlbW92ZSBwcmVsb2FkLmpzIGFuZCByZXBsYWNlIHdpdGggcHJlbG9hZC50c1xuICAgICAgYXdhaXQgZnMucmVtb3ZlKGZpbGVQYXRoKCdwcmVsb2FkLmpzJykpO1xuICAgICAgYXdhaXQgdGhpcy5jb3B5VGVtcGxhdGVGaWxlKHBhdGguam9pbihkaXJlY3RvcnksICdzcmMnKSwgJ3ByZWxvYWQudHMnKTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBuZXcgVHlwZVNjcmlwdFRlbXBsYXRlKCk7XG4iXSwibmFtZXMiOlsiVHlwZVNjcmlwdFRlbXBsYXRlIiwiQmFzZVRlbXBsYXRlIiwiaW5pdGlhbGl6ZVRlbXBsYXRlIiwiZGlyZWN0b3J5IiwiYXN5bmNPcmEiLCJwYWNrYWdlSlNPTlBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsInBhY2thZ2VKU09OIiwiZnMiLCJyZWFkSnNvbiIsInNjcmlwdHMiLCJsaW50Iiwic3RhcnQiLCJtYWluIiwid3JpdGVKc29uIiwic3BhY2VzIiwiZmlsZVBhdGgiLCJmaWxlTmFtZSIsImpvaW4iLCJjb3B5VGVtcGxhdGVGaWxlIiwicmVtb3ZlIiwidGVtcGxhdGVEaXIiLCJfX2Rpcm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQXlCLEdBQTJCLENBQTNCLFNBQTJCO0FBQ3ZCLEdBQStCLENBQS9CLGFBQStCO0FBQzdDLEdBQVUsQ0FBVixRQUFVO0FBQ1IsR0FBTSxDQUFOLEtBQU07Ozs7OztNQUVqQkEsa0JBQWtCLFNBQVNDLGFBQVk7VUFHckNDLGtCQUFrQixDQUFDQyxTQUFpQixFQUFFLENBQUM7UUFDM0MsS0FBSyxDQUFDLEtBQUssQ0FBQ0Qsa0JBQWtCLENBQUNDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDNUMsS0FBSyxLQUFDQyxTQUFRLFdBQUMsQ0FBZ0MsMkNBQWMsQ0FBQztZQUM1RCxLQUFLLENBQUNDLGVBQWUsR0FBR0MsS0FBSSxTQUFDQyxPQUFPLENBQUNKLFNBQVMsRUFBRSxDQUFjO1lBQzlELEtBQUssQ0FBQ0ssV0FBVyxHQUFHLEtBQUssQ0FBQ0MsUUFBRSxTQUFDQyxRQUFRLENBQUNMLGVBQWU7WUFFckQsRUFBb0MsQUFBcEMsa0NBQW9DO1lBQ3BDRyxXQUFXLENBQUNHLE9BQU8sQ0FBQ0MsSUFBSSxHQUFHLENBQW9CO1lBQy9DSixXQUFXLENBQUNHLE9BQU8sQ0FBQ0UsS0FBSyxHQUFHLENBQTZCO1lBQ3pETCxXQUFXLENBQUNNLElBQUksR0FBRyxDQUFlO1lBRWxDLEtBQUssQ0FBQ0wsUUFBRSxTQUFDTSxTQUFTLENBQUNWLGVBQWUsRUFBRUcsV0FBVyxFQUFFLENBQUM7Z0JBQUNRLE1BQU0sRUFBRSxDQUFDO1lBQUMsQ0FBQztRQUNoRSxDQUFDO1FBRUQsS0FBSyxLQUFDWixTQUFRLFdBQUMsQ0FBcUMsZ0RBQWMsQ0FBQztZQUNqRSxLQUFLLENBQUNhLFFBQVEsSUFBSUMsUUFBZ0IsR0FBS1osS0FBSSxTQUFDYSxJQUFJLENBQUNoQixTQUFTLEVBQUUsQ0FBSyxNQUFFZSxRQUFROztZQUUzRSxFQUE0QyxBQUE1QywwQ0FBNEM7WUFDNUMsS0FBSyxDQUFDLElBQUksQ0FBQ0UsZ0JBQWdCLENBQUNqQixTQUFTLEVBQUUsQ0FBZTtZQUV0RCxFQUErQyxBQUEvQyw2Q0FBK0M7WUFDL0MsS0FBSyxDQUFDLElBQUksQ0FBQ2lCLGdCQUFnQixDQUFDakIsU0FBUyxFQUFFLENBQWdCO1lBRXZELEVBQTRDLEFBQTVDLDBDQUE0QztZQUM1QyxLQUFLLENBQUNNLFFBQUUsU0FBQ1ksTUFBTSxDQUFDSixRQUFRLENBQUMsQ0FBVTtZQUNuQyxLQUFLLENBQUMsSUFBSSxDQUFDRyxnQkFBZ0IsQ0FBQ2QsS0FBSSxTQUFDYSxJQUFJLENBQUNoQixTQUFTLEVBQUUsQ0FBSyxPQUFHLENBQVU7WUFFbkUsRUFBZ0QsQUFBaEQsOENBQWdEO1lBQ2hELEtBQUssQ0FBQ00sUUFBRSxTQUFDWSxNQUFNLENBQUNKLFFBQVEsQ0FBQyxDQUFZO1lBQ3JDLEtBQUssQ0FBQyxJQUFJLENBQUNHLGdCQUFnQixDQUFDZCxLQUFJLFNBQUNhLElBQUksQ0FBQ2hCLFNBQVMsRUFBRSxDQUFLLE9BQUcsQ0FBWTtRQUN2RSxDQUFDO0lBQ0gsQ0FBQzs7O1FBbENILElBbUNDLENBbENRbUIsV0FBVyxHQUFHaEIsS0FBSSxTQUFDQyxPQUFPLENBQUNnQixTQUFTLEVBQUUsQ0FBSSxLQUFFLENBQU07OztlQW9DNUMsR0FBRyxDQUFDdkIsa0JBQWtCIn0=